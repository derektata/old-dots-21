# Basic Settings
set preview true
set previewer ~/.config/lf/preview.sh
set hidden true
# set color256 true
# set drawbox true
set icons true
set ignorecase true

# Basic Mappings
map <esc> quit
map . set hidden!
map D delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map mb chmod
map br bulk-rename
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Archive Mappings
map az zip
map at tar
map ae extract

# Fuzzy Mappings
map fj :fzf_jump
map ff $nvim $(fzf)

# Git Mappings
map gb :git_branch
map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}
map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}

# Movement Mappings
map ~ cd ~
map cb cd ~/.local/bin
map cc cd ~/.config
map cC cd ~/code
map cd cd ~/.dots
map cD cd ~/downloads
map cf cd ~/docs
map cn cd ~/.config/nvim
map cN cd ~/docs/notes
map cr cd ~/repos
map cs cd ~/.local/share


# General file system commands
cmd open ${{
  case $(file --mime-type "$f" -bL) in
    text/*|application/json) $EDITOR "$f";;
    video/*|image/*/application/pdf) xdg-open "$f";;
    *) xdg-open "$f" ;;
  esac
}}


cmd mkdir ${{
  printf "\nDirectory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "\nFile Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "\nModify Bits: "
  read ans

  for file in "$fx"
  do
  chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "\nFile Name: "
  read ans
  sudo $EDITOR $ans
}}

# Edit filename before the extension
cmd edit-filename ${{
  # get 'basename' of the selection
  filename="${f##*/}"
  # quote it so we won't deal with quotes in the lf -remote command
  filename="$(printf '%q' "$filename")"
  filename="${filename// /<space>}"
  lf -remote "send $id push :rename<space>$filename<a-b><c-b>"
}}

# bulk rename files
cmd bulk-rename ${{
  old="$(mktemp)"
    new="$(mktemp)"
    [ -n "$fs" ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
      printf '%s\n' "$fs" >"$new"
      $EDITOR "$new"
      [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
      paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
          continue
        fi
        mv -- "$src" "$dst"
      done
      rm -- "$old" "$new"
      lf -remote "send $id unselect"
}}


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
  set -f
  case "$f" in
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf "$f" ;;
    *.tar.gz|*.tgz) tar xzvf "$f" ;;
    *.tar.xz|*.txz) tar xJvf "$f" ;;
    *.img.xz) unxz "$f" ;;
    *.zip) unzip "$f" ;;
    *.rar) unrar x "$f" ;;
    *.7z) 7z x "$f" ;;
  esac
}}


# compress current file or selected files with tar and gunzip
cmd tar ${{
  set -f
    mkdir "$f"
    cp -r "$f" "$f"
    tar czf "$f.tar.gz" "$f"
    rm -rf "$f"
}}


# compress current file or selected files with zip
cmd zip ${{
  set -f
    mkdir "$f"
    cp -r "$f" "$f"
    zip -r "$f.zip" "$f"
    rm -rf "$f"
}}


# Trash Commands
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

# Git Commands
cmd git_branch ${{
  git branch | fzf | xargs git checkout
  pwd_shell=$(pwd)
  lf -remote "send $id updir"
  lf -remote "send $id cd \"$pwd_shell\""
}}

cmd on-cd &{{
# display git repository status in your prompt
  source /usr/share/git/completion/git-prompt.sh
  GIT_PS1_SHOWDIRTYSTATE=auto
  GIT_PS1_SHOWSTASHSTATE=auto
  GIT_PS1_SHOWUNTRACKEDFILES=auto
  GIT_PS1_SHOWUPSTREAM=auto
  GIT_PS1_COMPRESSSPARSESTATE=auto
  git=$(__git_ps1 " [îœ¥ %s]") || true
  fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m$git\033[0m"
  lf -remote "send $id set promptfmt \"$fmt\""
}}


# FZF Commands
cmd fzf_jump ${{
  res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
  if [ -d "$res" ]; then
    cmd="cd"
  else
    cmd="select"
  fi

  lf -remote "send $id $cmd \"$res\""
}}


# Remove some defaults
map "'"
map '"'
map d
map c
map e
map f
map m
map n
map o
